<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - OneClubHub</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #ffffff;
        }

        .navbar {
            background: rgba(33, 33, 33, 0.95);
            border-bottom: 1px solid #404040;
            padding: 1rem 2rem;
        }

        .navbar-brand {
            color: #ffffff !important;
            font-weight: 600;
            font-size: 1.5rem;
        }

        .nav-link {
            color: #b3b3b3 !important;
            transition: color 0.3s ease;
            margin: 0 10px;
        }

        .nav-link:hover {
            color: #ffffff !important;
        }

        .chat-container {
            display: flex;
            height: calc(100vh - 72px);
            background: rgba(33, 33, 33, 0.95);
            border: 1px solid #404040;
            border-radius: 10px;
            margin: 20px;
            overflow: hidden;
        }

        .chat-sidebar {
            width: 300px;
            background: rgba(45, 45, 45, 0.5);
            border-right: 1px solid #404040;
            display: flex;
            flex-direction: column;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid #404040;
        }

        .search-box {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #404040;
            border-radius: 20px;
            padding: 8px 15px;
            color: #ffffff;
            width: 100%;
            margin-top: 10px;
        }

        .search-box:focus {
            outline: none;
            border-color: #666666;
        }

        .chat-list {
            flex: 1;
            overflow-y: auto;
        }

        .chat-item {
            padding: 15px 20px;
            border-bottom: 1px solid #404040;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .chat-item:hover {
            background: rgba(255, 255, 255, 0.05);
        }

        .chat-item.active {
            background: rgba(255, 255, 255, 0.1);
        }

        .chat-item-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .chat-name {
            font-weight: 600;
            color: #ffffff;
        }

        .chat-time {
            color: #808080;
            font-size: 0.8rem;
        }

        .chat-preview {
            color: #b3b3b3;
            font-size: 0.9rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            padding: 20px;
            border-bottom: 1px solid #404040;
            display: flex;
            align-items: center;
        }

        .chat-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
        }

        .chat-title {
            font-weight: 600;
            color: #ffffff;
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .message {
            max-width: 70%;
            padding: 10px 15px;
            border-radius: 15px;
            position: relative;
        }

        .message.sent {
            background: #404040;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }

        .message.received {
            background: rgba(255, 255, 255, 0.1);
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }

        .message-time {
            font-size: 0.7rem;
            color: #808080;
            margin-top: 5px;
            text-align: right;
        }

        .chat-input {
            padding: 20px;
            border-top: 1px solid #404040;
            display: flex;
            gap: 10px;
        }

        .message-input {
            flex: 1;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #404040;
            border-radius: 20px;
            padding: 10px 20px;
            color: #ffffff;
        }

        .message-input:focus {
            outline: none;
            border-color: #666666;
        }

        .send-button {
            background: #404040;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #ffffff;
            transition: all 0.3s ease;
        }

        .send-button:hover {
            background: #4d4d4d;
            transform: scale(1.05);
        }

        .community-badge {
            background: #4CAF50;
            color: white;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.7rem;
            margin-left: 5px;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg">
        <div class="container">
            <a class="navbar-brand" href="/">OneClubHub</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/home">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/myprofile">My Profile</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/chat">
                            <i class="fas fa-comments"></i> Chat
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/logout">Sign Out</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Chat Container -->
    <div class="chat-container">
        <!-- Sidebar -->
        <div class="chat-sidebar">
            <div class="sidebar-header">
                <h5>Messages</h5>
                <input type="text" class="search-box" placeholder="Search chats...">
            </div>
            <div class="chat-list">
                <!-- Community Rooms -->
                <div class="chat-item active">
                    <div class="chat-item-header">
                        <span class="chat-name">PICT CSI Community <span class="community-badge">Community</span></span>
                        <span class="chat-time">12:30 PM</span>
                    </div>
                    <div class="chat-preview">Welcome to the CSI community chat!</div>
                </div>
                <div class="chat-item">
                    <div class="chat-item-header">
                        <span class="chat-name">PICT ACM Community <span class="community-badge">Community</span></span>
                        <span class="chat-time">11:45 AM</span>
                    </div>
                    <div class="chat-preview">Next workshop on AI and Machine Learning</div>
                </div>

                <!-- Individual Chats -->
                <div class="chat-item">
                    <div class="chat-item-header">
                        <span class="chat-name">Rahul Sharma (CSI President)</span>
                        <span class="chat-time">10:20 AM</span>
                    </div>
                    <div class="chat-preview">About the upcoming hackathon...</div>
                </div>
                <div class="chat-item">
                    <div class="chat-item-header">
                        <span class="chat-name">Priya Patel (ACM Vice President)</span>
                        <span class="chat-time">Yesterday</span>
                    </div>
                    <div class="chat-preview">Thanks for your interest in the workshop!</div>
                </div>
            </div>
        </div>

        <!-- Main Chat Area -->
        <div class="chat-main">
            <div class="chat-header">
                <div class="chat-avatar">
                    <i class="fas fa-users"></i>
                </div>
                <div class="chat-title">PICT CSI Community</div>
            </div>
            <div class="chat-messages">
                <div class="message received">
                    Welcome to the CSI community chat! Feel free to discuss and share ideas.
                    <div class="message-time">12:30 PM</div>
                </div>
                <div class="message sent">
                    Hi everyone! Excited to be part of this community.
                    <div class="message-time">12:32 PM</div>
                </div>
                <div class="message received">
                    Don't forget about the upcoming hackathon registration!
                    <div class="message-time">12:35 PM</div>
                </div>
            </div>
            <div class="chat-input">
                <input type="text" class="message-input" placeholder="Type a message...">
                <button class="send-button">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Initialize Socket.IO with environment variables
        const socket = io({
            reconnection: true,
            reconnectionAttempts: <%= process.env.SOCKET_RECONNECTION_ATTEMPTS || 5 %>,
            reconnectionDelay: <%= process.env.SOCKET_RECONNECTION_DELAY || 1000 %>,
            timeout: <%= process.env.SOCKET_TIMEOUT || 10000 %>
        });

        const messageInput = document.querySelector('.message-input');
        const sendButton = document.querySelector('.send-button');
        const chatMessages = document.querySelector('.chat-messages');
        let currentRoom = 'csi-community'; // Default room
        let isConnected = false;
        let retryCount = 0;
        const MAX_RETRIES = 3;

        // Show error message to user
        function showError(message, isFatal = false) {
            const errorHTML = `
                <div class="message error ${isFatal ? 'fatal' : ''}">
                    ${message}
                    ${!isFatal ? '<button class="retry-btn">Retry</button>' : ''}
                </div>
            `;
            chatMessages.insertAdjacentHTML('beforeend', errorHTML);
            
            if (!isFatal) {
                const retryBtn = chatMessages.querySelector('.retry-btn:last-child');
                retryBtn.addEventListener('click', () => {
                    retryBtn.parentElement.remove();
                    loadChatHistory(currentRoom);
                });
            }
        }

        // Cleanup function
        function cleanup() {
            if (isConnected) {
                socket.off('message');
                socket.off('error');
                socket.off('connect');
                socket.off('disconnect');
                socket.off('connect_error');
                socket.off('reconnect_attempt');
                isConnected = false;
            }
        }

        // Initialize socket connection
        function initializeSocket() {
            cleanup(); // Clean up any existing listeners

            // Join default room
            socket.emit('joinRoom', currentRoom);

            // Socket event handlers
            socket.on('message', handleNewMessage);
            socket.on('error', handleSocketError);
            socket.on('connect', handleConnect);
            socket.on('disconnect', handleDisconnect);
            socket.on('connect_error', handleConnectionError);
            socket.on('reconnect_attempt', handleReconnectAttempt);

            isConnected = true;
        }

        // Event handlers
        function handleNewMessage(data) {
            try {
                if (!data || !data.content || !data.sender) {
                    throw new Error('Invalid message data received');
                }

                const isSent = data.sender === '<%= user._id %>';
                const messageHTML = `
                    <div class="message ${isSent ? 'sent' : 'received'}">
                        ${data.content}
                        <div class="message-time">${new Date(data.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                    </div>
                `;
                chatMessages.insertAdjacentHTML('beforeend', messageHTML);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            } catch (error) {
                console.error('Error handling new message:', error);
                showError('Failed to display message');
            }
        }

        function handleSocketError(error) {
            console.error('Socket error:', error);
            showError(error.message || 'Failed to send message');
        }

        function handleConnect() {
            console.log('Connected to Socket.IO server');
            retryCount = 0;
            loadChatHistory(currentRoom);
        }

        function handleDisconnect() {
            console.log('Disconnected from Socket.IO server');
            showError('Connection lost. Attempting to reconnect...');
        }

        function handleConnectionError(error) {
            console.error('Connection error:', error);
            showError('Failed to connect to server');
        }

        function handleReconnectAttempt(attemptNumber) {
            console.log(`Reconnection attempt ${attemptNumber}`);
            showError(`Reconnecting... Attempt ${attemptNumber}`);
        }

        // Load chat history with retry mechanism
        async function loadChatHistory(room) {
            try {
                const response = await fetch(`/api/messages/${room}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const messages = await response.json();
                
                // Clear existing messages
                chatMessages.innerHTML = '';
                
                // Add messages to chat
                messages.forEach(msg => {
                    try {
                        const isSent = msg.sender === '<%= user._id %>';
                        const messageHTML = `
                            <div class="message ${isSent ? 'sent' : 'received'}">
                                ${msg.content}
                                <div class="message-time">${new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                            </div>
                        `;
                        chatMessages.insertAdjacentHTML('beforeend', messageHTML);
                    } catch (error) {
                        console.error('Error rendering message:', error);
                    }
                });
                
                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
                retryCount = 0;
            } catch (error) {
                console.error('Error loading chat history:', error);
                if (retryCount < MAX_RETRIES) {
                    retryCount++;
                    setTimeout(() => loadChatHistory(room), 1000 * retryCount);
                } else {
                    showError('Failed to load messages after multiple attempts', true);
                }
            }
        }

        // Send message with validation
        function sendMessage() {
            try {
                const message = messageInput.value.trim();
                if (!message) {
                    return;
                }

                if (message.length > 1000) {
                    showError('Message is too long (max 1000 characters)');
                    return;
                }

                // Create message data
                const messageData = {
                    message: message,
                    room: currentRoom,
                    sender: '<%= user._id %>'
                };

                // Emit the message
                socket.emit('chatMessage', messageData);

                // Clear input
                messageInput.value = '';
            } catch (error) {
                console.error('Error sending message:', error);
                showError('Failed to send message');
            }
        }

        // Event listeners with error handling
        const sendMessageHandler = () => {
            try {
                sendMessage();
            } catch (error) {
                console.error('Error in send message handler:', error);
                showError('Failed to send message');
            }
        };

        const enterKeyHandler = (e) => {
            try {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            } catch (error) {
                console.error('Error in enter key handler:', error);
                showError('Failed to send message');
            }
        };

        // Add event listeners with error handling
        try {
            sendButton.addEventListener('click', sendMessageHandler);
            messageInput.addEventListener('keypress', enterKeyHandler);
        } catch (error) {
            console.error('Error adding event listeners:', error);
            showError('Failed to initialize chat interface', true);
        }

        // Chat switching with error handling
        const chatItems = document.querySelectorAll('.chat-item');
        chatItems.forEach(item => {
            item.addEventListener('click', () => {
                try {
                    // Remove active class from all items
                    chatItems.forEach(i => i.classList.remove('active'));
                    item.classList.add('active');

                    // Update current room and chat title
                    const roomName = item.querySelector('.chat-name').textContent.trim();
                    currentRoom = roomName.toLowerCase().replace(/\s+/g, '-');
                    document.querySelector('.chat-title').textContent = roomName;

                    // Leave current room and join new room
                    socket.emit('joinRoom', currentRoom);

                    // Load chat history for new room
                    loadChatHistory(currentRoom);
                } catch (error) {
                    console.error('Error switching chat:', error);
                    showError('Failed to switch chat room');
                }
            });
        });

        // Initialize socket connection
        try {
            initializeSocket();
        } catch (error) {
            console.error('Error initializing socket:', error);
            showError('Failed to initialize chat connection', true);
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', cleanup);

        // Load initial chat history
        loadChatHistory(currentRoom);
    </script>
</body>
</html>
